{"version":3,"sources":["script.js"],"names":["getUserMediaSupported","navigator","mediaDevices","getUserMedia","LERP","iL","iR","fRatio","greyScaleC","iG","iB","iBrightness","energy","activity","document","addEventListener","e","code","eVideo","getElementById","eCanvas","ctx","getContext","muted","eBackCanvas","createElement","ctxBack","iCanvasWidth","window","innerWidth","iCanvasHeight","innerHeight","fCanvasAspect","render","drawImage","width","height","aPixels","getImageData","beginPath","fillStyle","rect","fill","closePath","iNumPixels","i","cColor","data","iDeltaH","putImageData","fillText","toFixed","playbackRate","setTimeout","iWidth","videoWidth","iHeight","videoHeight","fVideoAspect","console","log"],"mappings":";AAWA,SAASA,IACA,SAAGC,UAAUC,eAClBD,UAAUC,aAAaC,cAG3B,SAASC,EAAKC,EAAIC,EAAIC,GAChBF,OAAAA,EAAKC,EACAD,GAAOC,EAAKD,GAAME,EAElBF,GAAOA,EAAKC,GAAMC,EAI7B,SAASC,EAAWF,EAAIG,EAAIC,GACtBC,IAAAA,EAAe,EAAEL,EAAG,EAAEG,EAAGC,IAAQ,EAC9B,MAAA,CAACC,EAAaA,EAAaA,GAGpC,IAAIC,EAAS,EACTC,GAAW,EAEfC,SAASC,iBAAiB,WAAY,SAASC,GAC9B,SAAXA,EAAEC,MAAmBL,EAAS,IAChCA,GAAkB,KAClBC,GAAW,KAIfC,SAASC,iBAAiB,QAAS,SAASC,GAC1CH,GAAW,IAKbC,SAASC,iBAAiB,mBAAoB,WACxCG,IAAAA,EAASJ,SAASK,eAAe,UAEjCC,EAAUN,SAASK,eAAe,UAClCE,EAAMD,EAAQE,WAAW,MAC7BJ,EAAOK,OAAQ,EAEXC,IAAAA,EAAcV,SAASW,cAAc,UACrCC,EAAUF,EAAYF,WAAW,MAEjCK,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,YACvBC,EAAgBL,EAAeG,EAoC5BG,SAAAA,IACPP,EAAQQ,UAAUhB,EAAQ,EAAG,EAAGA,EAAOiB,MAAOjB,EAAOkB,QAC/CC,IAAAA,EAAUX,EAAQY,aAAa,EAAG,EAAGpB,EAAOiB,MAAOjB,EAAOkB,QAE9Df,EAAIkB,YACJlB,EAAImB,UAAY,eAChBnB,EAAIoB,KAAK,EAAG,EAAGd,EAAcG,GAC7BT,EAAIqB,OACJrB,EAAIsB,YAGC,IADDC,IAAAA,EAAa1B,EAAOiB,MAAQjB,EAAOkB,OAAS,EACvCS,EAAI,EAAGA,EAAID,EAAYC,GAAQ,EAAG,CACrCC,IAAAA,EAAStC,EAAW6B,EAAQU,KAAKF,GACbR,EAAQU,KAAKF,EAAE,GACfR,EAAQU,KAAKF,EAAE,IAEvCR,EAAQU,KAAKF,GAAKzC,EAAK0C,EAAO,GAAIT,EAAQU,KAAKF,GAAIjC,GACnDyB,EAAQU,KAAKF,EAAE,GAAKzC,EAAK0C,EAAO,GAAIT,EAAQU,KAAKF,EAAE,GAAIjC,GACvDyB,EAAQU,KAAKF,EAAE,GAAKzC,EAAK0C,EAAO,GAAIT,EAAQU,KAAKF,EAAE,GAAIjC,GAGrDoC,IAAAA,GAAWlB,EAAgBZ,EAAOkB,QAAQ,EAE9Cf,EAAI4B,aAAaZ,EAAQ,EAAEW,GAG3B3B,EAAImB,UAAY,qBAChBnB,EAAI6B,SAAS,iCAAmCtC,EAAOuC,QAAQ,GAAK,IAAK,GAAI,IAEzEtC,EACFQ,EAAI6B,SAAS,oBAAqB,GAAI,IAElCtC,GAAU,KACZA,GAAkB,OAItBM,EAAOkC,aAAehD,EAAK,GAAK,IAAKQ,GAKrCyC,WAAWpB,EAAQ,GA7ErBb,EAAQe,MAAQR,EAChBP,EAAQgB,OAASN,EAEjBZ,EAAOH,iBAAkB,iBAAkB,SAAUC,GAC/CsC,IAAAA,EAAS,KAAKC,WACdC,EAAU,KAAKC,YACfC,EAAeJ,EAASE,EAC5BG,QAAQC,IAAI,KAAKN,EAAO,IAAIE,EAAQ,KAAKE,GAEzCxC,EAAOiB,MAAQR,EACfT,EAAOkB,OAASlB,EAAOiB,MAAQuB,EAE/BlC,EAAYW,MAAQjB,EAAOiB,MAC3BX,EAAYY,OAASlB,EAAOkB,OAE5BuB,QAAQC,IAAI,KAAK1C,EAAOiB,MAAM,IAAIjB,EAAOkB,OAAO,KAAKsB,GACrDC,QAAQC,IAAI,KAAKjC,EAAa,IAAIG,EAAc,KAAKE,GAKrDC,MACC,KAyDF","file":"script.7bb15f9f.js","sourceRoot":"..","sourcesContent":["\n\n// const video = document.getElementById('webcam');\n// const liveView = document.getElementById('liveView');\n// const demosSection = document.getElementById('demos');\n// const enableWebcamButton = document.getElementById('webcamButton');\n\n\n\n\n// Check if webcam access is supported.\nfunction getUserMediaSupported() {\n  return !!(navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia);\n}\n\nfunction LERP(iL, iR, fRatio) {\n  if (iL < iR) {\n    return iL + ((iR - iL) * fRatio);\n  } else {\n    return iL - ((iL - iR) * fRatio);\n  }\n}\n\nfunction greyScaleC(iR, iG, iB) {\n  var iBrightness = (3*iR+4*iG+iB) >>> 3;\n  return [iBrightness, iBrightness, iBrightness];\n}\n\nvar energy = 0.0;\nvar activity = false;\n\ndocument.addEventListener('keypress', function(e) {\n  if (e.code === \"KeyG\" && energy < 1.0) {\n    energy = energy + 0.025;\n    activity = true;\n  }\n})\n\ndocument.addEventListener('keyup', function(e) {\n  activity = false;\n})\n\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n \tvar eVideo = document.getElementById(\"player\");\n  //eVideo.playbackRate = 0.2;\n \tvar eCanvas = document.getElementById('canvas');\n \tvar ctx = eCanvas.getContext('2d');\n  eVideo.muted = true;\n\n \tvar eBackCanvas = document.createElement('canvas');\n \tvar ctxBack = eBackCanvas.getContext('2d');\n\n  var iCanvasWidth = window.innerWidth;\n  var iCanvasHeight = window.innerHeight;\n  var fCanvasAspect = iCanvasWidth / iCanvasHeight;\n  eCanvas.width = iCanvasWidth;\n  eCanvas.height = iCanvasHeight;\n\n  eVideo.addEventListener( \"loadedmetadata\", function (e) {\n    var iWidth = this.videoWidth;\n    var iHeight = this.videoHeight;\n    var fVideoAspect = iWidth / iHeight;\n    console.log(\"M[\"+iWidth+\",\"+iHeight+\"]=\"+fVideoAspect);\n\n    eVideo.width = iCanvasWidth;\n    eVideo.height = eVideo.width / fVideoAspect;\n\n    eBackCanvas.width = eVideo.width;\n    eBackCanvas.height = eVideo.height;\n\n    console.log(\"V[\"+eVideo.width+\",\"+eVideo.height+\"]=\"+fVideoAspect);\n    console.log(\"C[\"+iCanvasWidth+\",\"+iCanvasHeight+\"]=\"+fCanvasAspect);\n\n    // Initialise the webcam.\n\n\n    render();\n  }, false );\n\n\t// If webcam supported, add event listener to button for when user\n\t// wants to activate it to call enableCam function which we will\n\t// define in the next step.\n\t// if (getUserMediaSupported()) {\n\t// \tconsole.log(\"render\");\n\t// \trender();\n //  \t\t//enableWebcamButton.addEventListener('click', enableCam);\n\t// } else {\n //  \t\tconsole.warn('getUserMedia() is not supported by your browser');\n\t// }\n\nfunction render() {\n\t\tctxBack.drawImage(eVideo, 0, 0, eVideo.width, eVideo.height);\n    var aPixels = ctxBack.getImageData(0, 0, eVideo.width, eVideo.height);\n\n    ctx.beginPath();\n    ctx.fillStyle = \"rgb(0, 0, 0)\";\n    ctx.rect(0, 0, iCanvasWidth, iCanvasHeight);\n    ctx.fill();\n    ctx.closePath();\n\n    var iNumPixels = eVideo.width * eVideo.height * 4;\n    for (var i = 0; i < iNumPixels; i = i + 4) {\n      var cColor = greyScaleC(aPixels.data[i],\n                              aPixels.data[i+1],\n                              aPixels.data[i+2]);\n\n      aPixels.data[i] = LERP(cColor[0], aPixels.data[i], energy);\n      aPixels.data[i+1] = LERP(cColor[1], aPixels.data[i+1], energy);\n      aPixels.data[i+2] = LERP(cColor[2], aPixels.data[i+2], energy);\n    }\n\n    var iDeltaH = (iCanvasHeight - eVideo.height)/2\n\n    ctx.putImageData(aPixels,0,iDeltaH);\n\n\n    ctx.fillStyle = \"rgb(255, 255, 255)\";\n    ctx.fillText(\"Press g to simulate activity (\" + energy.toFixed(2) + \")\", 10, 15);\n\n    if (activity) {\n      ctx.fillText(\"Activity Detected\", 10, 30);\n    } else {\n      if (energy >= 0.1) {\n        energy = energy - 0.0125;\n      }\n    }\n\n    eVideo.playbackRate = LERP(0.2, 1.5, energy);\n\n\n    //console.log(energy)\n\n    setTimeout(render, 0);\n\t}\n}, false);\n\n\n\n\n\n// // Enable the live webcam view and start classification.\n// function enableCam(event) {\n//   // Only continue if the COCO-SSD has finished loading.\n//   if (!model) {\n//     return;\n//   }\n\n//   // Hide the button once clicked.\n//   event.target.classList.add('removed');\n\n//   // getUsermedia parameters to force video but not audio.\n//   const constraints = {\n//     video: true\n//   };\n\n//   // Activate the webcam stream.\n//   navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {\n//     video.srcObject = stream;\n//     video.addEventListener('loadeddata', predictWebcam);\n//   });\n// }\n\n// // Store the resulting model in the global scope of our app.\n// var model = undefined;\n\n// // Before we can use COCO-SSD class we must wait for it to finish\n// // loading. Machine Learning models can be large and take a moment\n// // to get everything needed to run.\n// // Note: cocoSsd is an external object loaded from our index.html\n// // script tag import so ignore any warning in Glitch.\n// cocoSsd.load().then(function (loadedModel) {\n//   model = loadedModel;\n//   // Show demo section now model is ready to use.\n//   demosSection.classList.remove('invisible');\n// });\n\n// var children = [];\n\n// function predictWebcam() {\n//   // Now let's start classifying a frame in the stream.\n//   model.detect(video).then(function (predictions) {\n//     // Remove any highlighting we did previous frame.\n//     for (let i = 0; i < children.length; i++) {\n//       liveView.removeChild(children[i]);\n//     }\n//     children.splice(0);\n\n//     // Now lets loop through predictions and draw them to the live view if\n//     // they have a high confidence score.\n//     for (let n = 0; n < predictions.length; n++) {\n//       // If we are over 66% sure we are sure we classified it right, draw it!\n//       if (predictions[n].score > 0.66) {\n//         const p = document.createElement('p');\n//         p.innerText = predictions[n].class  + ' - with '\n//             + Math.round(parseFloat(predictions[n].score) * 100)\n//             + '% confidence.';\n//         p.style = 'margin-left: ' + predictions[n].bbox[0] + 'px; margin-top: '\n//             + (predictions[n].bbox[1] - 10) + 'px; width: '\n//             + (predictions[n].bbox[2] - 10) + 'px; top: 0; left: 0;';\n\n//         const highlighter = document.createElement('div');\n//         highlighter.setAttribute('class', 'highlighter');\n//         highlighter.style = 'left: ' + predictions[n].bbox[0] + 'px; top: '\n//             + predictions[n].bbox[1] + 'px; width: '\n//             + predictions[n].bbox[2] + 'px; height: '\n//             + predictions[n].bbox[3] + 'px;';\n\n//         liveView.appendChild(highlighter);\n//         liveView.appendChild(p);\n//         children.push(highlighter);\n//         children.push(p);\n//       }\n//     }\n\n//     // Call this function again to keep predicting when the browser is ready.\n//     window.requestAnimationFrame(predictWebcam);\n//   });\n// }"]}